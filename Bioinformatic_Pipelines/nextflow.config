/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    pvivax/pvivaxclustering Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // TODO nf-core: Specify your pipeline's command line flags
    // Input options
    input                      = null
    // References
    genome                     = null
    igenomes_base              = 's3://ngi-igenomes/igenomes'
    igenomes_ignore            = false
    

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir                     = null
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false

    // Config options
    config_profile_name        = null
    config_profile_description = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes,igenomes_base'
    validationShowHiddenParams       = false
    //validate_params                  = true
    validate_params                  = false

    //General Parameters
    /* RAM  = 10000
    threads = 14
    fastqDir = "$baseDir/TEST_DATA"
    */
    cleanReads = "$baseDir/cleanReads"

    //The maximum amount of memory used in BBmerge. Larger files (>250Mbs) need a lot of memory, recommended over 10g. 
    //Specify GBs of memory with 'g', MBs of memory with 'm'. The default requests 12 GBs of memory. Specified value must be within quotes
    bbmergeRAM = "12g"

    adapters = "$baseDir/REFERENCES/Illumina_adapters.fasta"
    /*
    metadata = "$baseDir/pvivax_metadata.xlsx"
    //reportFolder = "$baseDir/REPORTS"
    qcFolder = "$baseDir/FASTQ_QC"
    
    pyscripts = "$baseDir/python_R_scripts"
    */
  //Clustering parameters
    //For module 1
      assignHap_min = 5
      depthNewHap_min = 20
      nameLength = 15

      originalHaplotypes_refs = "$baseDir/HAPLOTYPE_CALLER_PVIVAX/REF_SEQS/BLASTING/ORIGINAL_REFS/SHORT_HAPS_VIVAX_ALL_CHROMOSOMES_FINAL_FIXED_JULY_26_2023.fasta"
      fullNonJunction_refs = "$baseDir/HAPLOTYPE_CALLER_PVIVAX/REF_SEQS/READ_RECOVERY/P_VIVAX_ALL_LONG_HAPS_READ_RECOVERY_ALL_CHROMOSOMES_JULY_26_2023.fasta"
      origNewHaps = "$baseDir/HAPLOTYPE_CALLER_PVIVAX/REF_SEQS/BLASTING/NEW_HAPS"

      bedFile = "$baseDir/HAPLOTYPE_CALLER_PVIVAX/REF_SEQS/BED_FILE/FIXED_P_VIVAX_ALL_CHROMOSOMES_FINAL_FIXED_JULY_26_2023.bed"
      loci = "$baseDir/HAPLOTYPE_CALLER_PVIVAX/LIST_OF_LOCI_UNIQUE"
      fileSize = 200000


      // Specify parameter to perl and java scripts used for clustering
        multiSeq_pl = "$baseDir/HAPLOTYPE_CALLER_PVIVAX/make_multi_seq.pl"
        samjs = "$baseDir/HAPLOTYPE_CALLER_PVIVAX/java_depends/samjs.jar"
        pcrclipreads = "$baseDir/HAPLOTYPE_CALLER_PVIVAX/java_depends/pcrclipreads.jar"
        biostar84452 = "$baseDir/HAPLOTYPE_CALLER_PVIVAX/java_depends/biostar84452.jar"

        wf2HapSheet = "$projectDir/bin/empty.txt"
        wf3Matrix = "$projectDir/bin/empty.txt"

        hapSheet_specificGenotypes = "$projectDir/HAPLOTYPE_CALLER_PVIVAX/SPECIMEN_GENOTYPES"
        hapSheet_specificReferences = "$projectDir/Eukaryotpying-Python-main/PVIVAX_REF_GENOTYPES_forReports"

        shortread_hostremoval_index = "$projectDir/REFERENCES/GRCh38_noalt_as_GCA/"
        hostremoval_reference = "$projectDir/REFERENCES/GRCh38_noalt_as_GCA/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.gz"
        balkCountry_JLIB = "$baseDir/REFERENCES/pv_geo_refs/geoCombined_singularityCountry_classifier.joblib.gz"
        balkRegion_JLIB = "$projectDir/REFERENCES/pv_geo_refs/geoCombined_singularityRegion_classifier.joblib.gz"
        balkClassifier = "/opt/lkc-bisnp/lkc_bisnp-run"
        ampliseqRef = "$projectDir/REFERENCES/pv_geo_refs/P_VIVAX_ALL_LONG_HAPS_READ_RECOVERY_ALL_CHROMOSOMES_JULY_26_2023.fasta"
        REFERENCES = "$baseDir/REFERENCES/pv_geo_refs/"
        snpPositions = "$baseDir/REFERENCES/pv_geo_refs/geoCombined_snpPositions.csv"
        panelRefBarcode = "$baseDir/REFERENCES/pv_geo_refs/geoCombined_barcode_allSamples.csv"
      
      //mars
      snpeff_config = "$baseDir/pv_sal_snpEff_db"
      dbName = "pv_sal_snpEff_db"
      gff = "$baseDir/REFERENCES/pv_sal_Ref/PV_sal1.gff"
      ref = "$baseDir/REFERENCES/pv_sal_Ref/PV-salI.fasta"
      voi = "$baseDir/REFERENCES/pv_sal_Ref/voinew3.csv"
      out = "$baseDir/MaRS_Output"

      tree_timestamp = new java.util.Date().format( 'yyyyMMdd_HHmm')
      year = new java.util.Date().format( 'yyyy')
      //report_timestamp = new java.util.Date().format( 'yyyyMMdd_HHmm')
        

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false

        process {
            //beforeScript = "source /etc/profile; source /etc/profile.d/modules.sh; module load snippy; module load snp-sites; module load iqtree"
            withLabel: mappingSoftware {
                container = "/scicomp/groups-pure/Projects/CycloDeploy/Plasmodium_Ampliseq_Nextflow/singularityContainers/hapcalling_env.sif"
                //container = "library://davejacobson12/cyclo_containers/hapcalling_env:latest"
            }
            withLabel: bioinformaticProcessing {
                container = "/scicomp/groups-pure/Projects/CycloDeploy/Plasmodium_Ampliseq_Nextflow/singularityContainers/plasmodium_bioinformatics_container.sif"
                //container = "library://davejacobson12/pvivax_containers/plasmodium_bionformatics_container:latest"
            }
            withLabel: module2 {
                container = "/scicomp/groups-pure/Projects/CycloDeploy/Plasmodium_Ampliseq_Nextflow/singularityContainers/pythonenv_mod2.sif"
                //container = "library://davejacobson12/cyclo_containers/pythonenv:1.0.0"
            }
            withLabel: rScaling {
                container = "/scicomp/groups-pure/Projects/CycloDeploy/Plasmodium_Ampliseq_Nextflow/singularityContainers/clustering_env.sif"
                //container = "library://davejacobson12/cyclo_containers/clustering_env:latest"
            }
            withLabel: parnasEnv {
                container = "/scicomp/groups-pure/Projects/CycloDeploy/Plasmodium_Ampliseq_Nextflow/singularityContainers/parnas_container.sif"
                //container = 'library://davejacobson12/pvivax_containers/parnas_container:latest'
            }
            withLabel: ggtreeEnv {
                container = "/scicomp/groups-pure/Projects/CycloDeploy/Plasmodium_Ampliseq_Nextflow/singularityContainers/treeBuildR_env.sif"
                //container = 'library://davejacobson12/pvivax_containers/treebuildr_env:latest
            }
            withLabel: balkClassifier {
                container = "/scicomp/groups-pure/Projects/CycloDeploy/Plasmodium_Ampliseq_Nextflow/singularityContainers/balkClassifier.sif"
                //container = "library://davejacobson12/pvivax_containers/balkclassifier:latest"
            }
            withLabel: nfNest {
                container = "/scicomp/groups-pure/Projects/CycloDeploy/Plasmodium_Ampliseq_Nextflow/singularityContainers/nfNest_remoteBuild_v2.sif"
                //container = "library://davejacobson12/pvivax_containers/nfnest_remotebuild_v2:latest"
            }
            withLabel: reporting {
                container = "/scicomp/groups-pure/Projects/CycloDeploy/Plasmodium_Ampliseq_Nextflow/singularityContainers/R_report_v6.sif"
                //container = "library://davejacobson12/pvivax_containers/r_report_v6:latest"
            }
            withLabel: specimen_tracking {
                container = "/scicomp/groups-pure/Projects/CycloDeploy/Plasmodium_Ampliseq_Nextflow/singularityContainers/specimen_tracking_env_v2.sif"
            }
            withLabel:python39 {
                container = "/scicomp/groups-pure/Projects/CycloDeploy/Plasmodium_Ampliseq_Nextflow/singularityContainers/python_39.sif"
            }
            withLabel: nfNest {
                container = "/scicomp/groups-pure/Projects/CycloDeploy/Plasmodium_Ampliseq_Nextflow/singularityContainers/nfNest_remoteBuild_v2.sif"
            }
            withLabel: bedCov {
                container = "/scicomp/groups-pure/Projects/CycloDeploy/Plasmodium_Ampliseq_Nextflow/singularityContainers/samtools_bedtools.sif"
            }
        }
    }
    podman {
        podman.enabled         = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    shifter {
        shifter.enabled        = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    charliecloud {
        charliecloud.enabled   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        apptainer.enabled      = false
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 4
        executor.memory        = 8.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}
// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
def report_timestamp = new java.util.Date().format( 'yyyyMMdd_HHmm')
timeline {
    enabled = true
    file    = "${params.outdir}/${report_timestamp}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/${report_timestamp}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/${report_timestamp}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/${report_timestamp}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'pvivax/pvivaxclustering'
    author          = """quh7"""
    homePage        = 'https://github.com/pvivax/pvivaxclustering'
    description     = """hap calling and hierarchical clustering of pvivax ampliseq"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
